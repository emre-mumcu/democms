@using Microsoft.AspNetCore.Http
@using System.Reflection
@using src.App_Data.Types
@using src.App_Lib.Attributes
@using src.App_Lib.Tools
@using src.Controllers
@inject IHttpContextAccessor HttpContextAccessor

@model YetkiMatrisiViewModel

@{
    string sessionID = HttpContextAccessor.HttpContext.Session.Id;
}

<form id="frmContainer" asp-antiforgery=true></form>



<div class="row mt-4">
    <div class="col-lg-12">
        <div class="card">
            <div id="loading-overlay">
                <div class="loading-icon"></div>
            </div>

    using src.App_Data.Types;

            <div class="card-body">
                <h6 class="text-uppercase bg-light p-2 mt-0 mb-3">ROL LİSTESİ</h6>

                <form id="frmContainer" asp-antiforgery=true></form>

                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-addon1"><i class="fas fa-search"></i></span>
                    </div>
                    <input type="text" class="form-control" id="jsSearchInput" onkeyup="jsFilter()"
                        placeholder="Yetkiler İçerisinde Arama Yapınız" aria-label="Username"
                        aria-describedby="basic-addon1">
                </div>

                <div class="table-responsive" style="height:680px;overflow:auto">

                    <table class="table table-striped" id="jsSearchTable" width="100%">
                        <thead>
                            <tr>
                                <th>Kaynak Adı</th>
                                <th>İşlem Adı</th>

                                @foreach (EnumRoles re in (EnumRoles[])Enum.GetValues(typeof(EnumRoles)))
                                {
                                    MemberInfo memberInfo = re.GetType().GetMember(re.ToString()).First();
                                    RoleDescriptionAttribute rda =
                                    (RoleDescriptionAttribute)memberInfo.GetCustomAttributes(typeof(RoleDescriptionAttribute),
                                    false).First();
                                    <th style="text-align:center">
                                        @rda.RoleName
                                    </th>
                                }
                            </tr>
                        </thead>

                        @foreach (var item in Model.UygulamaYetkiListesi)
                        {
                            <tbody>
                                <tr>
                                    <td style="font-weight:bold">@item.Name</td>
                                    <td>@item.MemberName</td>
                                    @foreach (EnumRoles re in (EnumRoles[])Enum.GetValues(typeof(EnumRoles)))
                                    {
                                        MemberInfo memberInfo = re.GetType().GetMember(re.ToString()).First();
                                        RoleDescriptionAttribute rda =
                                        (RoleDescriptionAttribute)memberInfo.GetCustomAttributes(typeof(RoleDescriptionAttribute),
                                        false).First();
                                        bool isRoleExistsAndAllowed = Model.VeritabaniYetkiListesi
                                        .Where(r => (r.FullName == string.Concat(item.FullName, ".", item.MemberName) &&
                                        r.RoleCode == re.ToString() && r.Allow))
                                        .Any();

                                        string roleName = Security.Encrypt(re.ToString(), sessionID);
                                        string IsChecked = isRoleExistsAndAllowed ? ("checked") : ("");

                                        <td style="text-align:center">
                                            <label class="switch">
                                                <input type="checkbox" data-fullname="@item.FullName"
                                                    data-membername="@item.MemberName" data-role="@roleName"
                                                    onclick="YetkiIslem(this)" @IsChecked>
                                                <span class="slider round"></span>
                                            </label>
                                        </td>
                                    }
                                </tr>
                            </tbody>
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()

@section Scripts {

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"
        integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>


        function YetkiIslem(elem) {

            var token = $('input[name="__RequestVerificationToken"]').val();

            var is_selected = $(elem).is(":checked");
            var full_name = $(elem).data("fullname");
            var member_name = $(elem).data("membername");
            var role_name = $(elem).data("role");
            var is_selected_text = is_selected ? 1 : 0;

            var formData = new FormData();
            formData.append('__RequestVerificationToken', token);
            formData.append('Yetki', `${full_name}.${member_name}`);
            formData.append('Role', role_name);
            formData.append('Durum', is_selected_text);

            $.ajax({
                type: "POST",
                url: '@Url.Content("~/User/YetkiIslem")',
                data: formData,
                processData: false,
                contentType: false,
                beforeSend: function () {
                    $("#loading-overlay").show();
                },
                success: function (data, textStatus, jqXHR) {
                    console.log(data);
                    console.log(textStatus);
                    console.log(jqXHR);
                    $("#loading-overlay").hide();
                    iziToast.success({
                        message: "İşlem Başarılı",
                        position: 'topRight'
                    });

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    iziToast.error({
                        message: "Bir Hata Oluştu. Lütfen Tekrar Deneyiniz",
                        position: 'topRight'
                    });
                    $("#loading-overlay").hide();
                }
            });
        }
    </script>

}




<style>
    /* The switch - the box around the slider */
    .switch {
        position: relative;
        display: inline-block;
        width: 30px;
        height: 17px;
    }

    /* Hide default HTML checkbox */
    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    /* The slider */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 13px;
        width: 13px;
        left: 2px;
        bottom: 2px;
        background-color: white;
        -webkit-transition: .4s;
        transition: .4s;
    }

    input:checked+.slider {
        background-color: #154474;
        background-image: linear-gradient(90deg, #154474 0%, #0087c2, 100%);
    }

    input:focus+.slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked+.slider:before {
        -webkit-transform: translateX(13px);
        -ms-transform: translateX(13px);
        transform: translateX(13px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 17px;
    }

    .slider.round:before {
        border-radius: 50%;
    }
</style>
